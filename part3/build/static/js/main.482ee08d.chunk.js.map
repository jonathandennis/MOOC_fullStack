{"version":3,"sources":["components/Filter.js","components/Person.js","services/persons.js","components/Persons.js","components/PersonForm.js","components/Notification.js","App.js","index.js"],"names":["Filter","props","type","placeholder","value","searchTerm","onChange","handleFilterChange","Person","person","removePerson","style","listStyleType","name","number","onClick","baseUrl","axios","get","then","response","data","newObject","post","id","delete","put","Persons","persons","setPersons","notify","results","filter","toLowerCase","includes","padding","map","i","key","idName","console","log","window","confirm","personService","removePersonOf","PersonForm","onSubmit","addPerson","newName","handleNameChange","newNumber","handleNumberChange","Notification","notice","message","notificationStyle","background","color","fontSize","borderStyle","borderRadius","marginBottom","App","useState","setNewName","setNewNumber","setSearchTerm","notification","setNotification","useEffect","initialPersons","setTimeout","event","target","preventDefault","personObject","duplicateName","some","duplicateNumber","replace","alert","find","changedPerson","catch","error","returnedPerson","concat","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.482ee08d.chunk.js","sourcesContent":["//////////////////////////////////////////////////\n//////   My solution with corrections\n//////////////////////////////////////////////////\n\nimport React from 'react'\n\nconst Filter = (props) => {\n    \n    return (\n        <p>filter shown with <input type=\"text\"\n                                    placeholder=\"Search\"\n                                    value={props.searchTerm}\n                                    onChange={props.handleFilterChange} \n                                    />\n        </p>\n    )\n}\n\nexport default Filter \n\n\n//////////////////////////////////////////////////\n//////   suggested solution\n//////////////////////////////////////////////////\n/* \nimport React from 'react'\n\nconst Filter = (props) => {\n\n    return (\n      <input\n      value={props.value}\n      onChange={props.onChange}\n      />\n    )\n}\n\nexport default Filter\n */\n//////////////////////////////////////////////////\n//////   2.10: The Phonebook Step5\n//////////////////////////////////////////////////\n/* \nimport React from 'react'\n\nconst Filter = ({ searchTerm, handleFilterChange }) => {\n    \n    return (\n        <p>filter shown with <input type=\"text\"\n                                    placeholder=\"Search\"\n                                    value={searchTerm}\n                                    onChange={handleFilterChange} \n                                    />\n        </p>\n    )\n}\n\nexport default Filter \n*/","//////////////////////////////////////////////////\n//////   2.17: The Phonebook Step9\n//////////////////////////////////////////////////\n\nimport React from 'react'\n\nconst Person = ({ person, removePerson }) => {\n    \n\n    return (\n            <li style={{ listStyleType: \"none\" }}>\n                {person.name} {person.number}   <button onClick={removePerson}> delete </button>\n            </li>\n    )\n}\n\nexport default Person\n\n\n//////////////////////////////////////////////////\n//////   2.10: The Phonebook Step5\n//////////////////////////////////////////////////\n/* \nimport React from 'react'\n\nconst Person = ({ persons, searchTerm }) => {\n    \n    const results = !searchTerm\n        ? persons\n        : persons.filter(person => \n            person.name.toLowerCase().includes(searchTerm.toLowerCase())\n        )\n\n    return (\n        <ul style={{ padding: 0 }}>\n            {results.map(person => (\n            <li key={person.id} style={{ listStyleType: \"none\" }}>{person.name} {person.number}</li>\n            )\n            )}\n      </ul>\n    )\n}\n\nexport default Person\n*/\n\n//////////////////////////////////////////////////\n//////   2.9: The Phonebook Step4\n//////////////////////////////////////////////////\n\n// Due to issues I was having getting the search function to work I decided to reintroduce this component back into the app component for this exercise as it was not needed/required here.\n\n//////////////////////////////////////////////////\n//////   2.8: The Phonebook Step3\n//////////////////////////////////////////////////\n/* \nimport React from 'react';\n\nconst Person = ({ person }) => {\n    return (\n    <li style={{ listStyleType: \"none\" }}>{person.name} {person.number}</li>\n    )\n}\n\nexport default Person;\n*/\n\n//////////////////////////////////////////////////\n//////   2.6: The Phonebook Step1\n//////////////////////////////////////////////////\n\n/* import React from 'react';\n\nconst Person = ({ person }) => {\n    return (\n        <li style={{ listStyleType: \"none\" }}>{person.name}</li>\n    )\n}\n\nexport default Person; \n*/","//////////////////////////////////////////////////\n//////   My solution with corrections\n//////////////////////////////////////////////////\n\nimport axios from 'axios'\n//const baseUrl = 'http://localhost:3001/api/persons'\n//const baseUrl = 'https://arcane-refuge-08202.herokuapp.com/api/persons'\nconst baseUrl = '/api/persons'\n\nconst getAll = () => {\n    const request = axios.get(baseUrl)\n    return request.then(response => response.data)\n}\n\nconst create = newObject => {\n    const request = axios.post(baseUrl, newObject)\n    return request.then(response => response.data)\n}\n\nconst remove = (id) => {\n    const request = axios.delete(`${baseUrl}/${id}`)\n    return request.then(response => response.data)\n}\n\nconst update = (id, newObject) => {\n    const request = axios.put(`${baseUrl}/${id}`, newObject)\n    return request.then(response => response.data)\n}\n\nexport default { getAll, create, remove, update }\n\n//////////////////////////////////////////////////\n//////   suggested solution\n//////////////////////////////////////////////////\n/* \nimport axios from 'axios'\nconst baseUrl = 'http://localhost:3001/persons'\n\nconst getAll = () => {\n  const request = axios.get(baseUrl)\n  return request.then(response => {\n    return response.data\n  })\n}\n\nconst create = (newObject) => {\n  const request = axios.post(baseUrl, newObject)\n  return request.then(response => response.data)\n}\n\nconst remove = (id) => {\n  const request = axios.delete(`${baseUrl}/${id}`)\n  return request.then(response => response.data)\n}\n\nconst update = (id, newObject) => {\n  const request = axios.put(`${baseUrl}/${id}`, newObject)\n  return request.then(response => response.data)\n}\n\nexport default { getAll, create, update, remove }\n */\n//////////////////////////////////////////////////\n//////   2.17: The Phonebook Step9\n//////////////////////////////////////////////////\n/* \nimport axios from 'axios'\nconst baseUrl = 'http://localhost:3001/persons'\n\nconst getAll = () => {\n    const request = axios.get(baseUrl)\n    return request.then(response => response.data)\n}\n\nconst create = newObject => {\n    const request = axios.post(baseUrl, newObject)\n    return request.then(response => response.data)\n}\n\nconst remove = (id) => {\n    const request = axios.delete(`${baseUrl}/${id}`)\n    return request.then(response => response.data)\n}\n\nconst update = (id, newObject) => {\n    const request = axios.put(`${baseUrl}/${id}`, newObject)\n    return request.then(response => response.data)\n}\n\nexport default { getAll, create, remove, update }\n\n */\n//////////////////////////////////////////////////\n//////   2.16: The Phonebook Step8\n//////////////////////////////////////////////////\n/* \nimport axios from 'axios'\nconst baseUrl = 'http://localhost:3001/persons'\n\nconst getAll = () => {\n    const request = axios.get(baseUrl)\n    return request.then(response => response.data)\n}\n\nconst create = newObject => {\n    const request = axios.post(baseUrl, newObject)\n    return request.then(response => response.data)\n}\n\nconst update = (id, newObject) => {\n    const request = axios.put(`${baseUrl}/${id}`, newObject)\n    return request.then(response => response.data)\n}\n\nexport default { getAll, create, update } \n*/","//////////////////////////////////////////////////\n//////   My solution with corrections\n//////////////////////////////////////////////////\n\nimport React from 'react'\nimport Person from './Person'\nimport personService from '../services/persons'\n\nconst Persons = ({ persons, setPersons, searchTerm, notify }) => {\n\n    const results = !searchTerm\n            ? persons\n            : persons.filter(person => \n                person.name.toLowerCase().includes(searchTerm.toLowerCase())\n            )\n    \n    const removePersonOf = (id) => {\n\n        const idName = results.filter(person => person.id === id)\n        console.log('idName:', idName)\n        const isConfirm = (window.confirm(`Delete ${ idName[0].name }?`))\n            if (isConfirm) {\n                personService\n                .remove(id)\n                .then(() => {\n                  setPersons(results.filter(person => person.id !== id))\n                  notify(`${idName[0].name}'s number was sucessfully deleted!`, 'ok')\n            })\n      }\n    }\n\n    return(\n        <ul style={{ padding: 0 }}>\n      {results.map((person, i) =>\n        <Person \n          key={i}\n          person={person}\n          removePerson={() => removePersonOf(person.id)}\n        />\n      )}\n      </ul>\n    )\n}\n\nexport default Persons\n\n\n//////////////////////////////////////////////////\n//////   suggested solution\n//////////////////////////////////////////////////\n/* \nimport React from 'react'\n\nconst Persons = ({ persons, deletePerson }) => {\n  return (\n    persons.map(person=>\n      <p key={person.id}>\n        {person.name} {person.number} \n        <button onClick={() => deletePerson(person.id)}>delete</button>\n      </p>\n    )\n  )\n}\n\nexport default Persons\n\n */\n//////////////////////////////////////////////////\n//////   2.20: The Phonebook Step11\n//////////////////////////////////////////////////\n/* \nimport React from 'react'\nimport Person from './Person'\nimport personService from '../services/persons'\n\nconst Persons = ({ persons, setPersons, searchTerm, notify }) => {\n\n    const results = !searchTerm\n            ? persons\n            : persons.filter(person => \n                person.name.toLowerCase().includes(searchTerm.toLowerCase())\n            )\n    \n    const removePersonOf = (id) => {\n\n        const idName = results.filter(person => person.id === id)\n        console.log('idName:', idName)\n        const isConfirm = (window.confirm(`Delete ${ idName[0].name }?`))\n            if (isConfirm) {\n                personService\n                .remove(id)\n                .then(() => {\n                  setPersons(results.filter(person => person.id !== id))\n                  notify(`${idName[0].name}'s number was sucessfully deleted!`, 'ok')\n            })\n      }\n    }\n\n    return(\n        <ul style={{ padding: 0 }}>\n      {results.map((person, i) =>\n        <Person \n          key={i}\n          person={person}\n          removePerson={() => removePersonOf(person.id)}\n        />\n      )}\n      </ul>\n    )\n}\n\nexport default Persons\n */\n\n//////////////////////////////////////////////////\n//////   2.18: The Phonebook Step10\n//////////////////////////////////////////////////\n/* \nimport React from 'react'\nimport Person from './Person'\nimport personService from '../services/persons'\n\nconst Persons = ({ persons, setPersons, searchTerm }) => {\n\n    const results = !searchTerm\n            ? persons\n            : persons.filter(person => \n                person.name.toLowerCase().includes(searchTerm.toLowerCase())\n            )\n    \n    const removePersonOf = (id) => {\n\n        const idName = results.filter(person => person.id === id)\n        console.log('idName:', idName)\n        const isConfirm = (window.confirm(`Delete ${ idName[0].name }?`))\n            if (isConfirm) {\n                personService\n                .remove(id)\n                .then(() => {\n                    setPersons(results.filter(person => person.id !== id))\n            })\n        //console.log('don\\'t delete me!!!')\n      }\n    }\n\n    return(\n        <ul style={{ padding: 0 }}>\n      {results.map((person, i) =>\n        <Person \n          key={i}\n          person={person}\n          removePerson={() => removePersonOf(person.id)}\n        />\n      )}\n      </ul>\n    )\n}\n\nexport default Persons\n */\n\n//////////////////////////////////////////////////\n//////   2.17: The Phonebook Step9\n//////////////////////////////////////////////////\n/* \nimport React from 'react'\nimport Person from './Person'\nimport personService from '../services/persons'\n\nconst Persons = ({ persons, setPersons, searchTerm }) => {\n\n    const results = !searchTerm\n            ? persons\n            : persons.filter(person => \n                person.name.toLowerCase().includes(searchTerm.toLowerCase())\n            )\n    \n    const removePersonOf = (id) => {\n\n        let idName = results.filter(person => person.id === id)\n        console.log('idName:', idName)\n        window.confirm(`Delete ${ idName[0].name }?`)?\n            \n            personService\n            .remove(id)\n            .then(() => {\n                setPersons(results.filter(person => person.id !== id))\n            }):\n            setPersons(persons)\n            //console.log('don\\'t delete me!!!')\n\n      }\n\n    return(\n        <ul style={{ padding: 0 }}>\n      {results.map((person, i) =>\n        <Person \n          key={i}\n          person={person}\n          removePerson={() => removePersonOf(person.id)}\n        />\n      )}\n      </ul>\n    )\n}\n\nexport default Persons\n*/\n\n","//////////////////////////////////////////////////\n//////   My solution with corrections\n//////////////////////////////////////////////////\n\nimport React from 'react'\n\nconst PersonForm = (props) => {\n      \n    \n    return (\n        <form onSubmit={props.addPerson}>\n        <div>\n          name: <input \n                  value={props.newName}\n                  onChange={props.handleNameChange} \n                />\n        </div>\n        <div>\n          number: <input\n                    value={props.newNumber}\n                    onChange={props.handleNumberChange} \n                  />\n        </div>\n        <div>\n          <button type=\"submit\">add</button>\n        </div>\n      </form>\n    )\n}\n\nexport default PersonForm\n\n//////////////////////////////////////////////////\n//////   suggested solution\n//////////////////////////////////////////////////\n/* \nimport React from 'react'\n\nconst PersonForm = (props) => {\n\n  return (\n    <form onSubmit={props.addPerson}>\n      <div>\n        name: \n        <input\n          value={props.newName}\n          onChange={props.handleNameChange}\n        />\n      </div>\n      <div>\n        number:\n        <input \n          value={props.newNumber}\n          onChange={props.handleNumberChange}          \n        />\n      </div>\n      <div>\n        <button type=\"submit\">add</button>\n      </div>\n    </form>\n  )\n}\n\nexport default PersonForm\n */\n\n//////////////////////////////////////////////////\n//////   2.20: The Phonebook Step11\n//////////////////////////////////////////////////\n/* \nimport React from 'react'\nimport personService from '../services/persons'\n\n\nconst PersonForm = ({ persons, newName, newNumber, setPersons, setNewName, setNewNumber, notify, handleNameChange, handleNumberChange }) => {\n\n    const addPerson = (event) => {\n      event.preventDefault()\n      const personObject = {\n        name: newName,\n        number: newNumber\n      }\n      const duplicateName = persons.some(person => person.name.toLowerCase() === newName.toLowerCase())\n      const duplicateNumber = persons.some(person => person.number.replace(/ /g, '') === newNumber.replace(/ /g, ''))\n\n      if (!duplicateName) {\n        personService\n          .create(personObject)\n          .then(returnedPerson => {\n            notify(`${personObject.name} was sucessfully added!`, 'ok')\n            setPersons(persons.concat(returnedPerson))\n          })\n      }\n      else if (duplicateName && duplicateNumber) { \n        window.alert(`${newName} is already added to phonebook`)\n      }\n      else if (duplicateName && !duplicateNumber) {\n        const person = persons.find(person => person.name.toLowerCase() === newName.toLowerCase())\n        const changedPerson = {...person, number: newNumber}\n        const isConfirm = (window.confirm(`${newName} is already added to phonebook, replace the old number with a new one? `))\n          if (isConfirm) { \n            personService\n              .update(changedPerson.id, changedPerson)\n              .then(response => {\n                notify(`${person.name}'s number was sucessfully changed!`, 'ok')\n                setPersons(persons.map(person => person.id !== changedPerson.id ? person : response))})   \n              .catch(error => {\n                console.log('catch error:', error)\n                notify(`${person.name} was already deleted from server`)\n                setPersons(persons.filter(person => person.id !== changedPerson.id))\n              })\n          }\n        } \n        setNewName('')\n        setNewNumber('')       \n    }                \n    \n    return (\n        <form onSubmit={addPerson}>\n        <div>\n          name: <input \n                  value={newName}\n                  onChange={handleNameChange} \n                />\n        </div>\n        <div>\n          number: <input\n                    value={newNumber}\n                    onChange={handleNumberChange} \n                  />\n        </div>\n        <div>\n          <button type=\"submit\">add</button>\n        </div>\n      </form>\n    )\n}\n\nexport default PersonForm\n */\n\n//////////////////////////////////////////////////\n//////   2.18: The Phonebook Step10\n//////////////////////////////////////////////////\n/* \nimport React from 'react'\nimport personService from '../services/persons'\n\n\nconst PersonForm = ({ persons, newName, newNumber, setPersons, setNewName, setNewNumber, handleNameChange, handleNumberChange }) => {\n\n    const addPerson = (event) => {\n      event.preventDefault()\n      const personObject = {\n        name: newName,\n        number: newNumber\n      }\n      const duplicateName = persons.some(person => person.name.toLowerCase() === newName.toLowerCase())\n      const duplicateNumber = persons.some(person => person.number.replace(/ /g, '') === newNumber.replace(/ /g, ''))\n      console.log('duplicateName:', duplicateName)\n\n      if (!duplicateName) {\n        personService\n          .create(personObject)\n          .then(returnedPerson => {\n          setPersons(persons.concat(returnedPerson))\n          })\n      }\n      else if (duplicateName && duplicateNumber) { \n        window.alert(`${newName} is already added to phonebook`)\n      }\n      else if (duplicateName && !duplicateNumber) {\n        const person = persons.find(person => person.name.toLowerCase() === newName.toLowerCase())\n        const changedPerson = {...person, number: newNumber}\n        console.log('person in else/if:', person)\n        console.log('changedPerson in else/if:', changedPerson)\n        const isConfirm = (window.confirm(`${newName} is already added to phonebook, replace the old number with a new one? `))\n          if (isConfirm) { \n                personService\n                .update(changedPerson.id, changedPerson)\n                .then(response => {\n                  setPersons(persons.map(person => person.id !== changedPerson.id ? person : response))})       \n          }\n        } \n        setNewName('')\n        setNewNumber('')\n    }                \n\n    return (\n        <form onSubmit={addPerson}>\n        <div>\n          name: <input \n                  value={newName}\n                  onChange={handleNameChange} \n                />\n        </div>\n        <div>\n          number: <input\n                    value={newNumber}\n                    onChange={handleNumberChange} \n                  />\n        </div>\n        <div>\n          <button type=\"submit\">add</button>\n        </div>\n      </form>\n    )\n}\n\nexport default PersonForm\n */\n\n//////////////////////////////////////////////////\n//////   2.17: The Phonebook Step9\n//////////////////////////////////////////////////\n/* \nimport React from 'react'\nimport personService from '../services/persons'\n\n\nconst PersonForm = ({ persons, newName, newNumber, setPersons, setNewName, setNewNumber, handleNameChange, handleNumberChange }) => {\n\n    const addPerson = (event) => {\n      event.preventDefault()\n      const personObject = {\n        name: newName,\n        number: newNumber\n      }\n      persons.some(person => person.name.toLowerCase() === newName.toLowerCase()) ?\n      window.alert(`${newName} is already added to phonebook`) :\n      personService\n        .create(personObject)\n        .then(returnedPerson => {\n          setPersons(persons.concat(returnedPerson))\n          setNewName('')\n          setNewNumber('')\n        })\n    }                \n\n    return (\n        <form onSubmit={addPerson}>\n        <div>\n          name: <input \n                  value={newName}\n                  onChange={handleNameChange} \n                />\n        </div>\n        <div>\n          number: <input\n                    value={newNumber}\n                    onChange={handleNumberChange} \n                  />\n        </div>\n        <div>\n          <button type=\"submit\">add</button>\n        </div>\n      </form>\n    )\n}\n\nexport default PersonForm\n */\n\n//////////////////////////////////////////////////\n//////   2.16: The Phonebook Step8\n//////////////////////////////////////////////////\n/* \nimport React from 'react'\nimport personService from '../services/persons'\n\n\nconst PersonForm = ({ persons, newName, newNumber, setPersons, setNewName, setNewNumber, handleNameChange, handleNumberChange }) => {\n\n    const addPerson = (event) => {\n      event.preventDefault()\n      const personObject = {\n        name: newName,\n        number: newNumber\n      }\n      persons.some(person => person.name.toLowerCase() === newName.toLowerCase()) ?\n      window.alert(`${newName} is already added to phonebook`) :\n      personService\n        .create(personObject)\n        .then(returnedPerson => {\n          setPersons(persons.concat(returnedPerson))\n          setNewName('')\n          setNewNumber('')\n        })\n    }                \n\n    return (\n        <form onSubmit={addPerson}>\n        <div>\n          name: <input \n                  value={newName}\n                  onChange={handleNameChange} \n                />\n        </div>\n        <div>\n          number: <input\n                    value={newNumber}\n                    onChange={handleNumberChange} \n                  />\n        </div>\n        <div>\n          <button type=\"submit\">add</button>\n        </div>\n      </form>\n    )\n}\n\nexport default PersonForm\n*/\n\n//////////////////////////////////////////////////\n//////   2.15: The Phonebook Step7\n//////////////////////////////////////////////////\n/* \nimport React from 'react'\n\nimport axios from 'axios'\n\nconst PersonForm = ({ persons, newName, newNumber, setPersons, setNewName, setNewNumber, handleNameChange, handleNumberChange }) => {\n\n    const addPerson = (event) => {\n      event.preventDefault()\n      const personObject = {\n        name: newName,\n        number: newNumber\n      }\n      persons.some(person => person.name.toLowerCase() === newName.toLowerCase()) ?\n      window.alert(`${newName} is already added to phonebook`) :\n      axios\n        .post('http://localhost:3001/persons', personObject)\n        .then(response => {\n          setPersons(persons.concat(response.data))\n           setNewName('')\n           setNewNumber('')\n        })                \n      }\n\n    return (\n        <form onSubmit={addPerson}>\n        <div>\n          name: <input \n                  value={newName}\n                  onChange={handleNameChange} \n                />\n        </div>\n        <div>\n          number: <input\n                    value={newNumber}\n                    onChange={handleNumberChange} \n                  />\n        </div>\n        <div>\n          <button type=\"submit\">add</button>\n        </div>\n      </form>\n    )\n}\n\nexport default PersonForm\n*/\n//////////////////////////////////////////////////\n//////   2.10: The Phonebook Step5\n//////////////////////////////////////////////////\n\n/* \nimport React from 'react'\n\nconst PersonForm = ({ persons, newName, newNumber, setPersons, setNewName, setNewNumber, handleNameChange, handleNumberChange }) => {\n\n    const addPerson = (event) => {\n        event.preventDefault()\n        const personObject = {\n          name: newName,\n          number: newNumber,\n          id: persons.length + 1,\n        }\n        persons.some(person => person.name === newName) ?\n        window.alert(`${newName} is already added to phonebook`) :\n        setPersons(persons.concat(personObject))\n        setNewName('')\n        setNewNumber('')\n      }\n\n    return (\n        <form onSubmit={addPerson}>\n        <div>\n          name: <input \n                  value={newName}\n                  onChange={handleNameChange} \n                />\n        </div>\n        <div>\n          number: <input\n                    value={newNumber}\n                    onChange={handleNumberChange} \n                  />\n        </div>\n        <div>\n          <button type=\"submit\">add</button>\n        </div>\n      </form>\n    )\n}\n\nexport default PersonForm \n*/","//////////////////////////////////////////////////\n//////   My solution with corrections\n//////////////////////////////////////////////////\n \nimport React from 'react'\n\nconst Notification = ({ notice }) => {\n if (notice === null) {\n     return null\n   }\n   \n   console.log('message in Notification:', notice.message)\n   console.log('type in Notification:', notice.type)\n\n   const notificationStyle = {\n    background: 'lightgrey',\n    color: notice.type ==='ok' ? 'green' : 'red',\n    fontSize: 20,\n    borderStyle: 'solid',\n    borderRadius: 5,\n    padding: 5,\n    marginBottom: 10\n   }\n\n   return (\n    <div style={notificationStyle}>\n       {notice.message}\n    </div>\n  )\n}\n\n\nexport default Notification \n\n//////////////////////////////////////////////////\n//////   suggested solution\n//////////////////////////////////////////////////\n/* \nimport React from 'react'\n\nconst Notification = ({ notification }) => {\n  if (notification === null) {\n    return null\n  }\n\n  return (\n    <div className={notification.type}>\n      {notification.message}\n    </div>\n  )\n}\n\nexport default Notification\n\n *///////////////////////////////////////////////////\n//////   2.20: The Phonebook Step11\n//////////////////////////////////////////////////\n/* \nimport React from 'react'\n\nconst Notification = ({ notice }) => {\n if (notice === null) {\n     return null\n   }\n   \n   console.log('message in Notification:', notice.message)\n   console.log('type in Notification:', notice.type)\n\n   const notificationStyle = {\n    background: 'lightgrey',\n    color: notice.type ==='ok' ? 'green' : 'red',\n    fontSize: 20,\n    borderStyle: 'solid',\n    borderRadius: 5,\n    padding: 5,\n    marginBottom: 10\n   }\n\n   return (\n    <div style={notificationStyle}>\n       {notice.message}\n    </div>\n  )\n}\n\n\nexport default Notification \n*/","//////////////////////////////////////////////////\n//////   My solution with corrections\n//////////////////////////////////////////////////\n\nimport React, { useState, useEffect } from 'react'\nimport Filter from './components/Filter'\nimport Persons from './components/Persons'\nimport PersonForm from './components/PersonForm'\nimport Notification from './components/Notification'\nimport personService from './services/persons'\n\n\nconst App = () => {\n  const [ persons, setPersons ] = useState([]) \n  const [ newName, setNewName ] = useState('')\n  const [ newNumber, setNewNumber ] = useState('')\n  const [ searchTerm, setSearchTerm ] = useState('')\n  const [ notification, setNotification ] = useState(null)\n\n  useEffect(() => {\n      personService\n        .getAll()\n        .then(initialPersons => {\n          setPersons(initialPersons)\n        })\n  }, [])\n  \n  const handleNameChange = (event) => {\n    console.log(event.target.value)\n    setNewName(event.target.value)\n  }\n\n  const handleNumberChange = (event) => {\n    console.log(event.target.value)\n    setNewNumber(event.target.value)\n  }\n\n  const handleFilterChange = (event) => {\n    console.log(event.target.value)\n    setSearchTerm(event.target.value)\n  }\n\n  const notify = (message, type='error') => {\n    setNotification({type,message})\n    setTimeout(() => {\n      setNotification(null)\n    }, 2500)\n  }\n\n  const addPerson = (event) => {\n    event.preventDefault()\n    const personObject = {\n      name: newName,\n      number: newNumber\n    }\n    const duplicateName = persons.some(person => person.name.toLowerCase() === newName.toLowerCase())\n    const duplicateNumber = persons.some(person => person.number.replace(/ /g, '') === newNumber.replace(/ /g, ''))\n\n    if (!duplicateName) {\n      personService\n        .create(personObject)\n        .then(returnedPerson => {\n          notify(`${personObject.name} was sucessfully added!`, 'ok')\n          setPersons(persons.concat(returnedPerson))\n        })\n    }\n    else if (duplicateName && duplicateNumber) { \n      window.alert(`${newName} is already added to phonebook`)\n    }\n    else if (duplicateName && !duplicateNumber) {\n      const person = persons.find(person => person.name.toLowerCase() === newName.toLowerCase())\n      const changedPerson = {...person, number: newNumber}\n      const isConfirm = (window.confirm(`${newName} is already added to phonebook, replace the old number with a new one? `))\n        if (isConfirm) { \n          personService\n            .update(changedPerson.id, changedPerson)\n            .then(response => {\n              notify(`${person.name}'s number was sucessfully changed!`, 'ok')\n              setPersons(persons.map(person => person.id !== changedPerson.id ? person : response))})   \n            .catch(error => {\n              console.log('catch error:', error)\n              notify(`${person.name} was already deleted from server`)\n              setPersons(persons.filter(person => person.id !== changedPerson.id))\n            })\n        }\n      } \n      setNewName('')\n      setNewNumber('')       \n  }          \n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n        <Notification notice={notification}/>\n        <Filter searchTerm={searchTerm}\n                handleFilterChange={handleFilterChange} \n        />\n      <h2>add a new</h2>\n        <PersonForm addPerson={addPerson}\n                    newName={newName}\n                    newNumber={newNumber}\n                    handleNameChange={handleNameChange}\n                    handleNumberChange={handleNumberChange}\n          />\n      <h2>Numbers</h2>\n        <Persons persons={persons}\n                 setPersons={setPersons}\n                 searchTerm={searchTerm}\n                 setNotification={setNotification}\n                 notify={notify} \n        />\n    </div>\n  )\n}\n\nexport default App\n\n\n//////////////////////////////////////////////////\n//////   Suggested Solution\n//////////////////////////////////////////////////\n/* \nimport React, { useState, useEffect } from 'react'\nimport Persons from './components/Persons'\nimport PersonForm from './components/PersonForm'\nimport Notification from './components/Notification'\nimport Filter from './components/Filter'\nimport personService from './services/persons'\n\nconst App = () => {\n  const [persons, setPersons] = useState([])\n  const [ newName, setNewName ] = useState('')\n  const [ newNumber, setNewNumber ] = useState('')\n  const [ filterString, setStringFilter ] = useState('')\n  const [ notification, setNotification ] = useState(null)\n\n  useEffect(() => {\n    personService\n      .getAll()\n      .then((data) => {\n        setPersons(data)\n      })\n\n  }, [])\n\n  const notifyWith = (message, type='success') => {\n    setNotification({ message, type })\n    setTimeout(() => {\n      setNotification(null)\n    }, 5000)\n  }\n\n  const handleNameChange = (event) => {\n    setNewName(event.target.value)\n  }  \n  \n  const handleNumberChange = (event) => {\n    setNewNumber(event.target.value)\n  }  \n\n  const handleFilterStringChange = (event) => {\n    setStringFilter(event.target.value)\n  } \n\n  const deletePerson = (id) => {\n    const toDelete = persons.find(p => p.id === id)\n    const ok = window.confirm(`Delete ${toDelete.name}`)\n    if (ok) {\n      personService.remove(id)\n        .then(response => {\n          setPersons(persons.filter(p => p.id !== id))\n          notifyWith(`Deleted ${toDelete.name}`)\n        }).catch(() => {\n          setPersons(persons.filter(p => p.id !== id))\n          notifyWith(`${toDelete.name} had already been removed`, 'error')\n        })\n    }\n  }\n\n  const addPerson = (event) => {\n    event.preventDefault()\n\n    const existing = persons.find(p => p.name === newName)\n    if (existing) {\n      const ok = window.confirm(`${existing.name} already in phonebook, replace the old number with new one?`)\n      if (ok) {\n        personService.update(existing.id, {\n          name: existing.name,\n          number:newNumber\n        }).then(retunedPerson => {\n          setPersons(persons.map(person => person.id !== existing.id ? person : retunedPerson))\n          notifyWith(`Changed number of  ${existing.name}`)\n          setNewName('')\n          setNewNumber('')\n        })\n      }\n\n    } else {\n      personService.create({\n        name: newName,\n        number: newNumber   \n      }).then(addedPerson => {\n        setPersons(persons.concat(addedPerson))\n        notifyWith(`Added ${newName}`)\n        setNewName('')\n        setNewNumber('')\n      }).catch(error => {\n        // pääset käsiksi palvelimen palauttamaan virheilmoitusolioon näin\n        console.log(error.response.data.error)\n        notifyWith(`${error.response.data.error} `, 'error')\n      })\n    }\n  }\n\n  const personsToShow = filterString.length === 0 ?\n    persons : \n    persons.filter(p => p.name.toLowerCase().indexOf(filterString.toLowerCase()) > 0 )\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n\n      <Notification notification={notification} />\n\n      filter shown with: \n      <Filter\n        value={filterString}\n        onChange={handleFilterStringChange}\n      />\n\n      <h3>add a new</h3>\n      <PersonForm \n        handleNameChange={handleNameChange}\n        handleNumberChange={handleNumberChange}\n        newNumber={newNumber}\n        newName={newName}\n        addPerson={addPerson}\n      />\n     \n      <h3>Numbers</h3>\n      <Persons persons={personsToShow} deletePerson={deletePerson}/>\n    </div>\n  )\n\n}\n\nexport default App \n */\n\n//////////////////////////////////////////////////\n//////   2.20: The Phonebook Step11\n//////////////////////////////////////////////////\n/* \nimport React, { useState, useEffect } from 'react'\nimport Filter from './components/Filter'\nimport Persons from './components/Persons'\nimport PersonForm from './components/PersonForm'\nimport Notification from './components/Notification'\nimport personService from './services/persons'\n\n\nconst App = () => {\n  const [ persons, setPersons ] = useState([]) \n  const [ newName, setNewName ] = useState('')\n  const [ newNumber, setNewNumber ] = useState('')\n  const [ searchTerm, setSearchTerm ] = useState('')\n  const [notification, setNotification] = useState(null)\n\n  useEffect(() => {\n      personService\n        .getAll()\n        .then(initialPersons => {\n          setPersons(initialPersons)\n        })\n  }, [])\n  \n  const handleNameChange = (event) => {\n    console.log(event.target.value)\n    setNewName(event.target.value)\n  }\n\n  const handleNumberChange = (event) => {\n    console.log(event.target.value)\n    setNewNumber(event.target.value)\n  }\n\n  const handleFilterChange = (event) => {\n    console.log(event.target.value)\n    setSearchTerm(event.target.value)\n  }\n\n  const notify = (message, type='error') => {\n    setNotification({type,message})\n    setTimeout(() => {\n      setNotification(null)\n    }, 2500)\n  }\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n        <Notification notice={notification}/>\n        <Filter searchTerm={searchTerm}\n                handleFilterChange={handleFilterChange} \n        />\n      <h2>add a new</h2>\n        <PersonForm persons={persons}\n                    setPersons={setPersons}\n                    newName={newName}\n                    setNewName={setNewName}\n                    handleNameChange={handleNameChange} \n                    newNumber={newNumber}\n                    setNewNumber={setNewNumber}\n                    handleNumberChange={handleNumberChange}\n                    setNotification={setNotification}\n                    notify={notify}\n          />\n      <h2>Numbers</h2>\n        <Persons persons={persons}\n                 setPersons={setPersons}\n                 searchTerm={searchTerm}\n                 setNotification={setNotification}\n                 notify={notify} \n        />\n    </div>\n  )\n}\n\nexport default App\n\n */\n//////////////////////////////////////////////////\n//////   2.18: The Phonebook Step10\n//////////////////////////////////////////////////\n/* \nimport React, { useState, useEffect } from 'react'\nimport Filter from './components/Filter'\nimport Persons from './components/Persons'\nimport PersonForm from './components/PersonForm'\nimport personService from './services/persons'\n\n\nconst App = () => {\n  const [ persons, setPersons ] = useState([]) \n  const [ newName, setNewName ] = useState('')\n  const [ newNumber, setNewNumber ] = useState('')\n  const [ searchTerm, setSearchTerm ] = useState('')\n\n  useEffect(() => {\n      personService\n        .getAll()\n        .then(initialPersons => {\n          setPersons(initialPersons)\n        })\n  }, [])\n  \n  const handleNameChange = (event) => {\n    console.log(event.target.value)\n    setNewName(event.target.value)\n  }\n\n  const handleNumberChange = (event) => {\n    console.log(event.target.value)\n    setNewNumber(event.target.value)\n  }\n\n  const handleFilterChange = (event) => {\n    console.log(event.target.value)\n    setSearchTerm(event.target.value)\n  }\n\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n        <Filter searchTerm={searchTerm}\n                handleFilterChange={handleFilterChange} \n          />\n      <h2>add a new</h2>\n        <PersonForm persons={persons}\n                    setPersons={setPersons}\n                    newName={newName}\n                    setNewName={setNewName}\n                    handleNameChange={handleNameChange} \n                    newNumber={newNumber}\n                    setNewNumber={setNewNumber}\n                    handleNumberChange={handleNumberChange} \n          />\n      <h2>Numbers</h2>\n      <Persons \n            persons={persons}\n            setPersons={setPersons}\n            searchTerm={searchTerm} \n      />\n    </div>\n  )\n}\n\nexport default App\n\n */\n//////////////////////////////////////////////////\n//////   2.17: The Phonebook Step9\n//////////////////////////////////////////////////\n\n/* \nimport React, { useState, useEffect } from 'react'\nimport Filter from './components/Filter'\nimport Persons from './components/Persons'\nimport PersonForm from './components/PersonForm'\nimport personService from './services/persons'\n\n\nconst App = () => {\n  const [ persons, setPersons ] = useState([]) \n  const [ newName, setNewName ] = useState('')\n  const [ newNumber, setNewNumber ] = useState('')\n  const [ searchTerm, setSearchTerm ] = useState('')\n\n  useEffect(() => {\n      personService\n        .getAll()\n        .then(initialPersons => {\n          setPersons(initialPersons)\n        })\n  }, [])\n  \n  const handleNameChange = (event) => {\n    console.log(event.target.value)\n    setNewName(event.target.value)\n  }\n\n  const handleNumberChange = (event) => {\n    console.log(event.target.value)\n    setNewNumber(event.target.value)\n  }\n\n  const handleFilterChange = (event) => {\n    console.log(event.target.value)\n    setSearchTerm(event.target.value)\n  }\n\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n        <Filter searchTerm={searchTerm}\n                handleFilterChange={handleFilterChange} \n          />\n      <h2>add a new</h2>\n        <PersonForm persons={persons}\n                    setPersons={setPersons}\n                    newName={newName}\n                    setNewName={setNewName}\n                    handleNameChange={handleNameChange} \n                    newNumber={newNumber}\n                    setNewNumber={setNewNumber}\n                    handleNumberChange={handleNumberChange} \n          />\n      <h2>Numbers</h2>\n      <Persons \n            persons={persons}\n            setPersons={setPersons}\n            searchTerm={searchTerm} \n      />\n    </div>\n  )\n}\n\nexport default App\n*/\n\n//////////////////////////////////////////////////\n//////   2.16: The Phonebook Step8\n//////////////////////////////////////////////////\n/* \nimport React, { useState, useEffect } from 'react'\nimport Filter from './components/Filter'\nimport Person from './components/Person'\nimport PersonForm from './components/PersonForm'\nimport personService from './services/persons'\n\n\nconst App = () => {\n  const [ persons, setPersons ] = useState([]) \n  const [ newName, setNewName ] = useState('')\n  const [ newNumber, setNewNumber ] = useState('')\n  const [ searchTerm, setSearchTerm ] = useState('')\n\n  useEffect(() => {\n      personService\n        .getAll()\n        .then(initialPersons => {\n          setPersons(initialPersons)\n        })\n  }, [])\n  \n  const handleNameChange = (event) => {\n    console.log(event.target.value)\n    setNewName(event.target.value)\n  }\n\n  const handleNumberChange = (event) => {\n    console.log(event.target.value)\n    setNewNumber(event.target.value)\n  }\n\n  const handleFilterChange = (event) => {\n    console.log(event.target.value)\n    setSearchTerm(event.target.value)\n  }\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n        <Filter searchTerm={searchTerm}\n                handleFilterChange={handleFilterChange} \n          />\n      <h2>add a new</h2>\n        <PersonForm persons={persons}\n                    setPersons={setPersons}\n                    newName={newName}\n                    setNewName={setNewName}\n                    handleNameChange={handleNameChange} \n                    newNumber={newNumber}\n                    setNewNumber={setNewNumber}\n                    handleNumberChange={handleNumberChange} \n          />\n      <h2>Numbers</h2>\n        <Person persons={persons}\n                 searchTerm={searchTerm} \n        />\n    </div>\n  )\n}\n\nexport default App\n*/\n\n//////////////////////////////////////////////////\n//////   2.15: The Phonebook Step7\n//////////////////////////////////////////////////\n/* \nimport React, { useState, useEffect } from 'react'\nimport Filter from './components/Filter'\nimport Persons from './components/Persons'\nimport PersonForm from './components/PersonForm'\n\nimport axios from 'axios'\n\n\nconst App = () => {\n  const [ persons, setPersons ] = useState([]) \n  const [ newName, setNewName ] = useState('')\n  const [ newNumber, setNewNumber ] = useState('')\n  const [ searchTerm, setSearchTerm ] = useState('')\n\n  useEffect(() => {\n    console.log('effect')\n    axios\n      .get('http://localhost:3001/persons')\n      .then(response => {\n        console.log('promise fulfilled')\n        setPersons(response.data)\n      })\n  }, [])\n  \n  const handleNameChange = (event) => {\n    console.log(event.target.value)\n    setNewName(event.target.value)\n  }\n\n  const handleNumberChange = (event) => {\n    console.log(event.target.value)\n    setNewNumber(event.target.value)\n  }\n\n  const handleFilterChange = (event) => {\n    console.log(event.target.value)\n    setSearchTerm(event.target.value)\n  }\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n        <Filter searchTerm={searchTerm}\n                handleFilterChange={handleFilterChange} \n          />\n      <h2>add a new</h2>\n        <PersonForm persons={persons}\n                    setPersons={setPersons}\n                    newName={newName}\n                    setNewName={setNewName}\n                    handleNameChange={handleNameChange} \n                    newNumber={newNumber}\n                    setNewNumber={setNewNumber}\n                    handleNumberChange={handleNumberChange} \n          />\n      <h2>Numbers</h2>\n        <Persons persons={persons}\n                 searchTerm={searchTerm} \n        />\n    </div>\n  )\n}\n\nexport default App\n*/\n\n//////////////////////////////////////////////////\n//////   2.11: The Phonebook Step6\n//////////////////////////////////////////////////\n/* \nimport React, { useState, useEffect } from 'react'\nimport Filter from './components/Filter'\nimport Persons from './components/Persons'\nimport PersonForm from './components/PersonForm'\n\nimport axios from 'axios'\n\n\nconst App = () => {\n  const [ persons, setPersons ] = useState([]) \n  const [ newName, setNewName ] = useState('')\n  const [ newNumber, setNewNumber ] = useState('')\n  const [ searchTerm, setSearchTerm ] = useState('')\n\n  useEffect(() => {\n    console.log('effect')\n    axios\n      .get('http://localhost:3001/persons')\n      .then(response => {\n        console.log('promise fulfilled')\n        setPersons(response.data)\n      })\n  }, [])\n  \n  const handleNameChange = (event) => {\n    console.log(event.target.value)\n    setNewName(event.target.value)\n  }\n\n  const handleNumberChange = (event) => {\n    console.log(event.target.value)\n    setNewNumber(event.target.value)\n  }\n\n  const handleFilterChange = (event) => {\n    console.log(event.target.value)\n    setSearchTerm(event.target.value)\n  }\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n        <Filter searchTerm={searchTerm}\n                handleFilterChange={handleFilterChange} \n          />\n      <h2>add a new</h2>\n        <PersonForm persons={persons}\n                    setPersons={setPersons}\n                    newName={newName}\n                    setNewName={setNewName}\n                    handleNameChange={handleNameChange} \n                    newNumber={newNumber}\n                    setNewNumber={setNewNumber}\n                    handleNumberChange={handleNumberChange} \n          />\n      <h2>Numbers</h2>\n        <Persons persons={persons}\n                 searchTerm={searchTerm} \n        />\n    </div>\n  )\n}\n\nexport default App\n*/\n\n//////////////////////////////////////////////////\n//////   2.10: The Phonebook Step5\n//////////////////////////////////////////////////\n/* \nimport React, { useState } from 'react'\nimport Filter from './components/Filter'\nimport Persons from './components/Persons'\nimport PersonForm from './components/PersonForm'\n\n\nconst App = (props) => {\n  const [ persons, setPersons ] = useState(props.persons) \n  const [ newName, setNewName ] = useState('')\n  const [ newNumber, setNewNumber ] = useState('')\n  const [ searchTerm, setSearchTerm ] = useState('')\n\n  \n  const handleNameChange = (event) => {\n    console.log(event.target.value)\n    setNewName(event.target.value)\n  }\n\n  const handleNumberChange = (event) => {\n    console.log(event.target.value)\n    setNewNumber(event.target.value)\n  }\n\n  const handleFilterChange = (event) => {\n    console.log(event.target.value)\n    setSearchTerm(event.target.value)\n  }\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n        <Filter searchTerm={searchTerm}\n                handleFilterChange={handleFilterChange} \n          />\n      <h2>add a new</h2>\n        <PersonForm persons={persons}\n                    setPersons={setPersons}\n                    newName={newName}\n                    setNewName={setNewName}\n                    handleNameChange={handleNameChange} \n                    newNumber={newNumber}\n                    setNewNumber={setNewNumber}\n                    handleNumberChange={handleNumberChange} \n          />\n      <h2>Numbers</h2>\n        <Persons persons={persons}\n                 searchTerm={searchTerm} \n        />\n    </div>\n  )\n}\n\nexport default App\n*/\n\n//////////////////////////////////////////////////\n//////   2.9: The Phonebook Step4\n//////////////////////////////////////////////////\n/* \nimport React, { useState } from 'react'\n\nconst App = (props) => {\n  const [ persons, setPersons ] = useState(props.persons)\n  // const [persons, setPersons] = useState([\n  //   { name: 'Arto Hellas', number: '040-123456' },\n  //   { name: 'Ada Lovelace', number: '39-44-5323523' },\n  //   { name: 'Dan Abramov', number: '12-43-234345' },\n  //   { name: 'Mary Poppendieck', number: '39-23-6423122' }\n  // ]) \n  const [ newName, setNewName ] = useState('')\n  const [ newNumber, setNewNumber ] = useState('')\n  const [ searchTerm, setSearchTerm ] = useState('')\n\n  const addPerson = (event) => {\n    event.preventDefault()\n    const personObject = {\n      name: newName,\n      number: newNumber,\n      id: persons.length + 1,\n    }\n    persons.some(person => person.name === newName) ?\n    window.alert(`${newName} is already added to phonebook`) :\n    setPersons(persons.concat(personObject))\n    setNewName('')\n    setNewNumber('')\n  }\n  \n  const results = !searchTerm\n  ? persons\n  : persons.filter(person => \n      person.name.toLowerCase().includes(searchTerm.toLowerCase())\n  )\n  \n  const handleNameChange = (event) => {\n    console.log(event.target.value)\n    setNewName(event.target.value)\n  }\n\n  const handleNumberChange = (event) => {\n    console.log(event.target.value)\n    setNewNumber(event.target.value)\n  }\n\n  const handleFilterChange = (event) => {\n    console.log(event.target.value)\n    setSearchTerm(event.target.value)\n  }\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n        <p>filter shown with <input\n                            type=\"text\"\n                            placeholder=\"Search\"\n                            value={searchTerm}\n                            onChange={handleFilterChange} \n                          />\n        </p>\n      <h2>add a new</h2>\n      <form onSubmit={addPerson}>\n        <div>\n          name: <input \n                  value={newName}\n                  onChange={handleNameChange} \n                />\n        </div>\n        <div>\n          number: <input\n                    value={newNumber}\n                    onChange={handleNumberChange} \n                  />\n        </div>\n        <div>\n          <button type=\"submit\">add</button>\n        </div>\n      </form>\n      <h2>Numbers</h2>\n      <ul style={{ padding: 0 }}>\n        {results.map(person => (\n          <li key={person.id} style={{ listStyleType: \"none\" }}>{person.name} {person.number}</li>\n        )\n        )}\n      </ul>\n    </div>\n  )\n}\n\nexport default App\n*/\n\n//////////////////////////////////////////////////\n//////   2.8: The Phonebook Step3\n//////////////////////////////////////////////////\n/* \nimport React, { useState } from 'react'\nimport Person from './components/Person'\n\nconst App = (props) => {\n  const [ persons, setPersons ] = useState(props.persons) \n  const [ newName, setNewName ] = useState('')\n  const [ newNumber, setNewNumber] = useState('')\n\n  const addPerson = (event) => {\n    event.preventDefault()\n    const personObject = {\n      name: newName,\n      number: newNumber,\n      id: persons.length + 1,\n    }\n    persons.some(person => person.name === newName) ?\n    window.alert(`${newName} is already added to phonebook`) :\n    setPersons(persons.concat(personObject))\n    setNewName('')\n    setNewNumber('')\n  }\n\n  const handleNameChange = (event) => {\n    console.log(event.target.value)\n    setNewName(event.target.value)\n  }\n\n  const handleNumberChange = (event) => {\n    console.log(event.target.value)\n    setNewNumber(event.target.value)\n  }\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <form onSubmit={addPerson}>\n        <div>\n          name: <input \n                  value={newName}\n                  onChange={handleNameChange} \n                />\n        </div>\n        <div>\n          number: <input\n                    value={newNumber}\n                    onChange={handleNumberChange} />\n        </div>\n        <div>\n          <button type=\"submit\">add</button>\n        </div>\n      </form>\n      <h2>Numbers</h2>\n      <ul style={{ padding: 0 }}>\n        {persons.map(person => \n          <Person key={person.id} person={person} />\n        )}\n      </ul>\n    </div>\n  )\n}\n\nexport default App\n*/\n\n//////////////////////////////////////////////////\n//////   2.7: The Phonebook Step2\n//////////////////////////////////////////////////\n/* \nimport React, { useState } from 'react'\nimport Person from './components/Person'\n\nconst App = (props) => {\n  const [ persons, setPersons ] = useState(props.persons) \n  const [ newName, setNewName ] = useState('')\n\n  const addName = (event) => {\n    event.preventDefault()\n    const nameObject = {\n      name: newName,\n      id: persons.length + 1,\n    }\n    persons.some(person => person.name === newName) ?\n    window.alert(`${newName} is already added to phonebook`) :\n    setPersons(persons.concat(nameObject))\n    setNewName('')\n  }\n\n  const handleNameChange = (event) => {\n    console.log(event.target.value)\n    setNewName(event.target.value)\n  }\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <form onSubmit={addName}>\n        <div>\n          name: <input \n                  value={newName}\n                  onChange={handleNameChange} \n                />\n        </div>\n        <div>\n          <button type=\"submit\">add</button>\n        </div>\n      </form>\n      <h2>Numbers</h2>\n      <ul style={{ padding: 0 }}>\n        {persons.map(person => \n          <Person key={person.id} person={person} />\n        )}\n      </ul>\n    </div>\n  )\n}\n\nexport default App\n */\n\n//////////////////////////////////////////////////\n//////   2.6: The Phonebook Step1\n//////////////////////////////////////////////////\n/* \nimport React, { useState } from 'react'\nimport Person from './components/Person'\n\n\nconst App = (props) => {\n  const [ persons, setPersons ] = useState(props.persons) \n  const [ newName, setNewName ] = useState('')\n\n  const addName = (event) => {\n    event.preventDefault()\n    const nameObject = {\n      name: newName,\n      id: persons.length + 1,\n    }\n\n    setPersons(persons.concat(nameObject))\n    setNewName('')\n  }\n\n  const handleNameChange = (event) => {\n    console.log(event.target.value)\n    setNewName(event.target.value)\n  }\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <form onSubmit={addName}>\n        <div>\n          name: <input \n                  value={newName}\n                  onChange={handleNameChange} \n                />\n        </div>\n        <div>\n          <button type=\"submit\">add</button>\n        </div>\n      </form>\n      <h2>Numbers</h2>\n      <ul style={{ padding: 0 }}>\n        {persons.map(person => \n          <Person key={person.id} person={person} />\n        )}\n      </ul>\n    </div>\n  )\n}\n\nexport default App \n*/","//////////////////////////////////////////////////\n//////   My solution with corrections\n//////////////////////////////////////////////////\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />, document.getElementById('root'));\n\n//////////////////////////////////////////////////\n//////   suggested solution\n//////////////////////////////////////////////////\n/* \nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport './index.css'\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n)\n */\n//////////////////////////////////////////////////\n//////   2.11: The Phonebook Step6\n//////////////////////////////////////////////////\n/* \nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />, document.getElementById('root'));\n */\n//////////////////////////////////////////////////\n//////   2.8-10: The Phonebook Step3-5\n//////////////////////////////////////////////////\n/* \nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nconst persons = [\n  {\n    id: 1,\n    name: 'Arto Hellas',\n    number: '040-1234567',\n  },\n  {\n    id: 2,\n    name: 'Ada Lovelace',\n    number: '39-44-5323523',\n  }\n]\n\n\nReactDOM.render(\n  <App persons={persons} />,\n  document.getElementById('root')\n);\n*/\n\n//////////////////////////////////////////////////\n//////   2.7: The Phonebook Step2\n//////////////////////////////////////////////////\n\n/* import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nconst persons = [\n  {\n    id: 1,\n    name: 'Arto Hellas'\n  },\n  {\n    id: 2,\n    name: 'Ada Lovelace'\n  },\n]\n\n//console.log(persons.includes('Ada Lovelace'))\n\nReactDOM.render(\n  <App persons={persons} />,\n  document.getElementById('root')\n);\n */\n\n//////////////////////////////////////////////////\n//////   2.6: The Phonebook Step1\n//////////////////////////////////////////////////\n\n/* \nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nconst persons = [\n  {\n    id: 1,\n    name: 'Arto Hellas'\n  },\n  {\n    id: 2,\n    name: 'Ada Lovelace'\n  }\n]\n\nReactDOM.render(\n  <App persons={persons} />,\n  document.getElementById('root')\n); \n*/"],"sourceRoot":""}
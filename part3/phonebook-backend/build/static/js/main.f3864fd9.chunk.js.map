{"version":3,"sources":["components/Filter.js","components/Persons.js","components/PersonForm.js","components/Notification.js","services/persons.js","App.js","index.js"],"names":["Filter","props","placeholder","value","onChange","Persons","persons","removePerson","map","person","key","id","style","padding","margin","name","number","onClick","PersonForm","onSubmit","addPerson","newName","handleNameChange","newNumber","handleNumberChange","type","Notification","notice","console","log","message","notificationStyle","background","color","fontSize","borderStyle","borderRadius","marginBottom","baseUrl","axios","get","then","response","data","newObject","post","delete","put","App","useState","setPersons","setNewName","setNewNumber","searchTerm","setSearchTerm","notification","setNotification","useEffect","personService","initialPersons","notify","setTimeout","personsToShow","length","filter","toLowerCase","includes","event","target","preventDefault","personObject","duplicateName","some","duplicateNumber","replace","window","alert","find","changedPerson","confirm","catch","error","errMessage","returnedPerson","concat","toDelete","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f3864fd9.chunk.js","sourcesContent":["//////////////////////////////////////////////////\n//////   My solution with corrections\n//////////////////////////////////////////////////\n\nimport React from 'react'\n\nconst Filter = (props) => {\n    \n    return (\n        <p>filter shown with <input\n                                placeholder=\"Search\"\n                                value={props.value}\n                                onChange={props.onChange} \n                            />\n        </p>\n    )\n}\n\nexport default Filter \n\n\n//////////////////////////////////////////////////\n//////   suggested solution\n//////////////////////////////////////////////////\n/* \nimport React from 'react'\n\nconst Filter = (props) => {\n\n    return (\n      <input\n      value={props.value}\n      onChange={props.onChange}\n      />\n    )\n}\n\nexport default Filter\n */\n//////////////////////////////////////////////////\n//////   2.10: The Phonebook Step5\n//////////////////////////////////////////////////\n/* \nimport React from 'react'\n\nconst Filter = ({ searchTerm, handleFilterChange }) => {\n    \n    return (\n        <p>filter shown with <input type=\"text\"\n                                    placeholder=\"Search\"\n                                    value={searchTerm}\n                                    onChange={handleFilterChange} \n                                    />\n        </p>\n    )\n}\n\nexport default Filter \n*/","//////////////////////////////////////////////////\n//////   My solution with corrections\n//////////////////////////////////////////////////\n\nimport React from 'react'\n\nconst Persons = ({ persons, removePerson }) => {\n    \n\n    return(\n      persons.map(person=>\n        <p key={person.id} style={{ padding: 0, margin: 3 }}>\n          {person.name} {person.number}     <button onClick={() => removePerson(person.id)}>delete</button>\n        </p>\n    )\n  )\n}\n\nexport default Persons\n\n\n//////////////////////////////////////////////////\n//////   suggested solution\n//////////////////////////////////////////////////\n/* \nimport React from 'react'\n\nconst Persons = ({ persons, deletePerson }) => {\n  return (\n    persons.map(person=>\n      <p key={person.id}>\n        {person.name} {person.number} \n        <button onClick={() => deletePerson(person.id)}>delete</button>\n      </p>\n    )\n  )\n}\n\nexport default Persons\n\n */\n//////////////////////////////////////////////////\n//////   2.20: The Phonebook Step11\n//////////////////////////////////////////////////\n/* \nimport React from 'react'\nimport Person from './Person'\nimport personService from '../services/persons'\n\nconst Persons = ({ persons, setPersons, searchTerm, notify }) => {\n\n    const results = !searchTerm\n            ? persons\n            : persons.filter(person => \n                person.name.toLowerCase().includes(searchTerm.toLowerCase())\n            )\n    \n    const removePersonOf = (id) => {\n\n        const idName = results.filter(person => person.id === id)\n        console.log('idName:', idName)\n        const isConfirm = (window.confirm(`Delete ${ idName[0].name }?`))\n            if (isConfirm) {\n                personService\n                .remove(id)\n                .then(() => {\n                  setPersons(results.filter(person => person.id !== id))\n                  notify(`${idName[0].name}'s number was sucessfully deleted!`, 'ok')\n            })\n      }\n    }\n\n    return(\n        <ul style={{ padding: 0 }}>\n      {results.map((person, i) =>\n        <Person \n          key={i}\n          person={person}\n          removePerson={() => removePersonOf(person.id)}\n        />\n      )}\n      </ul>\n    )\n}\n\nexport default Persons\n */\n\n//////////////////////////////////////////////////\n//////   2.18: The Phonebook Step10\n//////////////////////////////////////////////////\n/* \nimport React from 'react'\nimport Person from './Person'\nimport personService from '../services/persons'\n\nconst Persons = ({ persons, setPersons, searchTerm }) => {\n\n    const results = !searchTerm\n            ? persons\n            : persons.filter(person => \n                person.name.toLowerCase().includes(searchTerm.toLowerCase())\n            )\n    \n    const removePersonOf = (id) => {\n\n        const idName = results.filter(person => person.id === id)\n        console.log('idName:', idName)\n        const isConfirm = (window.confirm(`Delete ${ idName[0].name }?`))\n            if (isConfirm) {\n                personService\n                .remove(id)\n                .then(() => {\n                    setPersons(results.filter(person => person.id !== id))\n            })\n        //console.log('don\\'t delete me!!!')\n      }\n    }\n\n    return(\n        <ul style={{ padding: 0 }}>\n      {results.map((person, i) =>\n        <Person \n          key={i}\n          person={person}\n          removePerson={() => removePersonOf(person.id)}\n        />\n      )}\n      </ul>\n    )\n}\n\nexport default Persons\n */\n\n//////////////////////////////////////////////////\n//////   2.17: The Phonebook Step9\n//////////////////////////////////////////////////\n/* \nimport React from 'react'\nimport Person from './Person'\nimport personService from '../services/persons'\n\nconst Persons = ({ persons, setPersons, searchTerm }) => {\n\n    const results = !searchTerm\n            ? persons\n            : persons.filter(person => \n                person.name.toLowerCase().includes(searchTerm.toLowerCase())\n            )\n    \n    const removePersonOf = (id) => {\n\n        let idName = results.filter(person => person.id === id)\n        console.log('idName:', idName)\n        window.confirm(`Delete ${ idName[0].name }?`)?\n            \n            personService\n            .remove(id)\n            .then(() => {\n                setPersons(results.filter(person => person.id !== id))\n            }):\n            setPersons(persons)\n            //console.log('don\\'t delete me!!!')\n\n      }\n\n    return(\n        <ul style={{ padding: 0 }}>\n      {results.map((person, i) =>\n        <Person \n          key={i}\n          person={person}\n          removePerson={() => removePersonOf(person.id)}\n        />\n      )}\n      </ul>\n    )\n}\n\nexport default Persons\n*/\n\n","//////////////////////////////////////////////////\n//////   My solution \n//////////////////////////////////////////////////\n\nimport React from 'react'\n\nconst PersonForm = (props) => {\n      \n    \n    return (\n        <form onSubmit={props.addPerson}>\n        <div>\n          name: <input \n                  value={props.newName}\n                  onChange={props.handleNameChange} \n                />\n        </div>\n        <div>\n          number: <input\n                    value={props.newNumber}\n                    onChange={props.handleNumberChange} \n                  />\n        </div>\n        <div>\n          <button type=\"submit\">add</button>\n        </div>\n      </form>\n    )\n}\n\nexport default PersonForm\n\n//////////////////////////////////////////////////\n//////   suggested solution\n//////////////////////////////////////////////////\n/* \nimport React from 'react'\n\nconst PersonForm = (props) => {\n\n  return (\n    <form onSubmit={props.addPerson}>\n      <div>\n        name: \n        <input\n          value={props.newName}\n          onChange={props.handleNameChange}\n        />\n      </div>\n      <div>\n        number:\n        <input \n          value={props.newNumber}\n          onChange={props.handleNumberChange}          \n        />\n      </div>\n      <div>\n        <button type=\"submit\">add</button>\n      </div>\n    </form>\n  )\n}\n\nexport default PersonForm\n */\n\n//////////////////////////////////////////////////\n//////   2.20: The Phonebook Step11\n//////////////////////////////////////////////////\n/* \nimport React from 'react'\nimport personService from '../services/persons'\n\n\nconst PersonForm = ({ persons, newName, newNumber, setPersons, setNewName, setNewNumber, notify, handleNameChange, handleNumberChange }) => {\n\n    const addPerson = (event) => {\n      event.preventDefault()\n      const personObject = {\n        name: newName,\n        number: newNumber\n      }\n      const duplicateName = persons.some(person => person.name.toLowerCase() === newName.toLowerCase())\n      const duplicateNumber = persons.some(person => person.number.replace(/ /g, '') === newNumber.replace(/ /g, ''))\n\n      if (!duplicateName) {\n        personService\n          .create(personObject)\n          .then(returnedPerson => {\n            notify(`${personObject.name} was sucessfully added!`, 'ok')\n            setPersons(persons.concat(returnedPerson))\n          })\n      }\n      else if (duplicateName && duplicateNumber) { \n        window.alert(`${newName} is already added to phonebook`)\n      }\n      else if (duplicateName && !duplicateNumber) {\n        const person = persons.find(person => person.name.toLowerCase() === newName.toLowerCase())\n        const changedPerson = {...person, number: newNumber}\n        const isConfirm = (window.confirm(`${newName} is already added to phonebook, replace the old number with a new one? `))\n          if (isConfirm) { \n            personService\n              .update(changedPerson.id, changedPerson)\n              .then(response => {\n                notify(`${person.name}'s number was sucessfully changed!`, 'ok')\n                setPersons(persons.map(person => person.id !== changedPerson.id ? person : response))})   \n              .catch(error => {\n                console.log('catch error:', error)\n                notify(`${person.name} was already deleted from server`)\n                setPersons(persons.filter(person => person.id !== changedPerson.id))\n              })\n          }\n        } \n        setNewName('')\n        setNewNumber('')       \n    }                \n    \n    return (\n        <form onSubmit={addPerson}>\n        <div>\n          name: <input \n                  value={newName}\n                  onChange={handleNameChange} \n                />\n        </div>\n        <div>\n          number: <input\n                    value={newNumber}\n                    onChange={handleNumberChange} \n                  />\n        </div>\n        <div>\n          <button type=\"submit\">add</button>\n        </div>\n      </form>\n    )\n}\n\nexport default PersonForm\n */\n\n//////////////////////////////////////////////////\n//////   2.18: The Phonebook Step10\n//////////////////////////////////////////////////\n/* \nimport React from 'react'\nimport personService from '../services/persons'\n\n\nconst PersonForm = ({ persons, newName, newNumber, setPersons, setNewName, setNewNumber, handleNameChange, handleNumberChange }) => {\n\n    const addPerson = (event) => {\n      event.preventDefault()\n      const personObject = {\n        name: newName,\n        number: newNumber\n      }\n      const duplicateName = persons.some(person => person.name.toLowerCase() === newName.toLowerCase())\n      const duplicateNumber = persons.some(person => person.number.replace(/ /g, '') === newNumber.replace(/ /g, ''))\n      console.log('duplicateName:', duplicateName)\n\n      if (!duplicateName) {\n        personService\n          .create(personObject)\n          .then(returnedPerson => {\n          setPersons(persons.concat(returnedPerson))\n          })\n      }\n      else if (duplicateName && duplicateNumber) { \n        window.alert(`${newName} is already added to phonebook`)\n      }\n      else if (duplicateName && !duplicateNumber) {\n        const person = persons.find(person => person.name.toLowerCase() === newName.toLowerCase())\n        const changedPerson = {...person, number: newNumber}\n        console.log('person in else/if:', person)\n        console.log('changedPerson in else/if:', changedPerson)\n        const isConfirm = (window.confirm(`${newName} is already added to phonebook, replace the old number with a new one? `))\n          if (isConfirm) { \n                personService\n                .update(changedPerson.id, changedPerson)\n                .then(response => {\n                  setPersons(persons.map(person => person.id !== changedPerson.id ? person : response))})       \n          }\n        } \n        setNewName('')\n        setNewNumber('')\n    }                \n\n    return (\n        <form onSubmit={addPerson}>\n        <div>\n          name: <input \n                  value={newName}\n                  onChange={handleNameChange} \n                />\n        </div>\n        <div>\n          number: <input\n                    value={newNumber}\n                    onChange={handleNumberChange} \n                  />\n        </div>\n        <div>\n          <button type=\"submit\">add</button>\n        </div>\n      </form>\n    )\n}\n\nexport default PersonForm\n */\n\n//////////////////////////////////////////////////\n//////   2.17: The Phonebook Step9\n//////////////////////////////////////////////////\n/* \nimport React from 'react'\nimport personService from '../services/persons'\n\n\nconst PersonForm = ({ persons, newName, newNumber, setPersons, setNewName, setNewNumber, handleNameChange, handleNumberChange }) => {\n\n    const addPerson = (event) => {\n      event.preventDefault()\n      const personObject = {\n        name: newName,\n        number: newNumber\n      }\n      persons.some(person => person.name.toLowerCase() === newName.toLowerCase()) ?\n      window.alert(`${newName} is already added to phonebook`) :\n      personService\n        .create(personObject)\n        .then(returnedPerson => {\n          setPersons(persons.concat(returnedPerson))\n          setNewName('')\n          setNewNumber('')\n        })\n    }                \n\n    return (\n        <form onSubmit={addPerson}>\n        <div>\n          name: <input \n                  value={newName}\n                  onChange={handleNameChange} \n                />\n        </div>\n        <div>\n          number: <input\n                    value={newNumber}\n                    onChange={handleNumberChange} \n                  />\n        </div>\n        <div>\n          <button type=\"submit\">add</button>\n        </div>\n      </form>\n    )\n}\n\nexport default PersonForm\n */\n\n//////////////////////////////////////////////////\n//////   2.16: The Phonebook Step8\n//////////////////////////////////////////////////\n/* \nimport React from 'react'\nimport personService from '../services/persons'\n\n\nconst PersonForm = ({ persons, newName, newNumber, setPersons, setNewName, setNewNumber, handleNameChange, handleNumberChange }) => {\n\n    const addPerson = (event) => {\n      event.preventDefault()\n      const personObject = {\n        name: newName,\n        number: newNumber\n      }\n      persons.some(person => person.name.toLowerCase() === newName.toLowerCase()) ?\n      window.alert(`${newName} is already added to phonebook`) :\n      personService\n        .create(personObject)\n        .then(returnedPerson => {\n          setPersons(persons.concat(returnedPerson))\n          setNewName('')\n          setNewNumber('')\n        })\n    }                \n\n    return (\n        <form onSubmit={addPerson}>\n        <div>\n          name: <input \n                  value={newName}\n                  onChange={handleNameChange} \n                />\n        </div>\n        <div>\n          number: <input\n                    value={newNumber}\n                    onChange={handleNumberChange} \n                  />\n        </div>\n        <div>\n          <button type=\"submit\">add</button>\n        </div>\n      </form>\n    )\n}\n\nexport default PersonForm\n*/\n\n//////////////////////////////////////////////////\n//////   2.15: The Phonebook Step7\n//////////////////////////////////////////////////\n/* \nimport React from 'react'\n\nimport axios from 'axios'\n\nconst PersonForm = ({ persons, newName, newNumber, setPersons, setNewName, setNewNumber, handleNameChange, handleNumberChange }) => {\n\n    const addPerson = (event) => {\n      event.preventDefault()\n      const personObject = {\n        name: newName,\n        number: newNumber\n      }\n      persons.some(person => person.name.toLowerCase() === newName.toLowerCase()) ?\n      window.alert(`${newName} is already added to phonebook`) :\n      axios\n        .post('http://localhost:3001/persons', personObject)\n        .then(response => {\n          setPersons(persons.concat(response.data))\n           setNewName('')\n           setNewNumber('')\n        })                \n      }\n\n    return (\n        <form onSubmit={addPerson}>\n        <div>\n          name: <input \n                  value={newName}\n                  onChange={handleNameChange} \n                />\n        </div>\n        <div>\n          number: <input\n                    value={newNumber}\n                    onChange={handleNumberChange} \n                  />\n        </div>\n        <div>\n          <button type=\"submit\">add</button>\n        </div>\n      </form>\n    )\n}\n\nexport default PersonForm\n*/\n//////////////////////////////////////////////////\n//////   2.10: The Phonebook Step5\n//////////////////////////////////////////////////\n\n/* \nimport React from 'react'\n\nconst PersonForm = ({ persons, newName, newNumber, setPersons, setNewName, setNewNumber, handleNameChange, handleNumberChange }) => {\n\n    const addPerson = (event) => {\n        event.preventDefault()\n        const personObject = {\n          name: newName,\n          number: newNumber,\n          id: persons.length + 1,\n        }\n        persons.some(person => person.name === newName) ?\n        window.alert(`${newName} is already added to phonebook`) :\n        setPersons(persons.concat(personObject))\n        setNewName('')\n        setNewNumber('')\n      }\n\n    return (\n        <form onSubmit={addPerson}>\n        <div>\n          name: <input \n                  value={newName}\n                  onChange={handleNameChange} \n                />\n        </div>\n        <div>\n          number: <input\n                    value={newNumber}\n                    onChange={handleNumberChange} \n                  />\n        </div>\n        <div>\n          <button type=\"submit\">add</button>\n        </div>\n      </form>\n    )\n}\n\nexport default PersonForm \n*/","//////////////////////////////////////////////////\n//////   My solution with corrections\n//////////////////////////////////////////////////\n \nimport React from 'react'\n\nconst Notification = ({ notice }) => {\n if (notice === null) {\n     return null\n   }\n   \n   console.log('message in Notification:', notice.message)\n   console.log('type in Notification:', notice.type)\n\n   const notificationStyle = {\n    background: 'lightgrey',\n    color: notice.type ==='ok' ? 'green' : 'red',\n    fontSize: 20,\n    borderStyle: 'solid',\n    borderRadius: 5,\n    padding: 5,\n    marginBottom: 10\n   }\n\n   return (\n    <div style={notificationStyle}>\n       {notice.message}\n    </div>\n  )\n}\n\n\nexport default Notification \n\n//////////////////////////////////////////////////\n//////   suggested solution\n//////////////////////////////////////////////////\n/* \nimport React from 'react'\n\nconst Notification = ({ notification }) => {\n  if (notification === null) {\n    return null\n  }\n\n  return (\n    <div className={notification.type}>\n      {notification.message}\n    </div>\n  )\n}\n\nexport default Notification\n\n *///////////////////////////////////////////////////\n//////   2.20: The Phonebook Step11\n//////////////////////////////////////////////////\n/* \nimport React from 'react'\n\nconst Notification = ({ notice }) => {\n if (notice === null) {\n     return null\n   }\n   \n   console.log('message in Notification:', notice.message)\n   console.log('type in Notification:', notice.type)\n\n   const notificationStyle = {\n    background: 'lightgrey',\n    color: notice.type ==='ok' ? 'green' : 'red',\n    fontSize: 20,\n    borderStyle: 'solid',\n    borderRadius: 5,\n    padding: 5,\n    marginBottom: 10\n   }\n\n   return (\n    <div style={notificationStyle}>\n       {notice.message}\n    </div>\n  )\n}\n\n\nexport default Notification \n*/","//////////////////////////////////////////////////\n//////   3.11 phonebook full stack\n//////////////////////////////////////////////////\n\nimport axios from 'axios'\nconst baseUrl = '/api/persons'\n\nconst getAll = () => {\n    const request = axios.get(baseUrl)\n    return request.then(response => response.data)\n}\n\nconst create = newObject => {\n    const request = axios.post(baseUrl, newObject)\n    return request.then(response => response.data)\n}\n\nconst remove = (id) => {\n    const request = axios.delete(`${baseUrl}/${id}`)\n    return request.then(response => response.data)\n}\n\nconst update = (id, newObject) => {\n    const request = axios.put(`${baseUrl}/${id}`, newObject)\n    return request.then(response => response.data)\n}\n\nexport default { getAll, create, remove, update }\n\n//////////////////////////////////////////////////\n//////   suggested solution\n//////////////////////////////////////////////////\n/* \nimport axios from 'axios'\nconst baseUrl = 'http://localhost:3001/persons'\n\nconst getAll = () => {\n  const request = axios.get(baseUrl)\n  return request.then(response => {\n    return response.data\n  })\n}\n\nconst create = (newObject) => {\n  const request = axios.post(baseUrl, newObject)\n  return request.then(response => response.data)\n}\n\nconst remove = (id) => {\n  const request = axios.delete(`${baseUrl}/${id}`)\n  return request.then(response => response.data)\n}\n\nconst update = (id, newObject) => {\n  const request = axios.put(`${baseUrl}/${id}`, newObject)\n  return request.then(response => response.data)\n}\n\nexport default { getAll, create, update, remove }\n */\n//////////////////////////////////////////////////\n//////   2.17: The Phonebook Step9\n//////////////////////////////////////////////////\n/* \nimport axios from 'axios'\nconst baseUrl = 'http://localhost:3001/persons'\n\nconst getAll = () => {\n    const request = axios.get(baseUrl)\n    return request.then(response => response.data)\n}\n\nconst create = newObject => {\n    const request = axios.post(baseUrl, newObject)\n    return request.then(response => response.data)\n}\n\nconst remove = (id) => {\n    const request = axios.delete(`${baseUrl}/${id}`)\n    return request.then(response => response.data)\n}\n\nconst update = (id, newObject) => {\n    const request = axios.put(`${baseUrl}/${id}`, newObject)\n    return request.then(response => response.data)\n}\n\nexport default { getAll, create, remove, update }\n\n */\n//////////////////////////////////////////////////\n//////   2.16: The Phonebook Step8\n//////////////////////////////////////////////////\n/* \nimport axios from 'axios'\nconst baseUrl = 'http://localhost:3001/persons'\n\nconst getAll = () => {\n    const request = axios.get(baseUrl)\n    return request.then(response => response.data)\n}\n\nconst create = newObject => {\n    const request = axios.post(baseUrl, newObject)\n    return request.then(response => response.data)\n}\n\nconst update = (id, newObject) => {\n    const request = axios.put(`${baseUrl}/${id}`, newObject)\n    return request.then(response => response.data)\n}\n\nexport default { getAll, create, update } \n*/","//////////////////////////////////////////////////\n//////   My solution with corrections\n//////////////////////////////////////////////////\n\nimport React, { useState, useEffect } from 'react'\nimport Filter from './components/Filter'\nimport Persons from './components/Persons'\nimport PersonForm from './components/PersonForm'\nimport Notification from './components/Notification'\nimport personService from './services/persons'\n\n\nconst App = () => {\n  const [ persons, setPersons ] = useState([]) \n  const [ newName, setNewName ] = useState('')\n  const [ newNumber, setNewNumber ] = useState('')\n  const [ searchTerm, setSearchTerm ] = useState('')\n  const [ notification, setNotification ] = useState(null)\n\nuseEffect(() => {\n    personService\n      .getAll()\n      .then(initialPersons => {\n        setPersons(initialPersons)\n      })\n}, [])\n\nconst notify = (message, type='error') => {\n  setNotification({type,message})\n  setTimeout(() => {\n    setNotification(null)\n  }, 5000)\n}\n\nconst handleNameChange = (event) => {\n  console.log(event.target.value)\n  setNewName(event.target.value)\n}\nconst handleNumberChange = (event) => {\n  console.log(event.target.value)\n  setNewNumber(event.target.value)\n}\nconst handleFilterChange = (event) => {\n  console.log(event.target.value)\n  setSearchTerm(event.target.value)\n}\n \nconst removePersonOf = (id) => {\n  const toDelete = persons.find(person => person.id === id)\n  const ok = window.confirm(`Delete ${toDelete.name}?`)\n  if (ok) {\n    personService\n      .remove(id)\n      .then(response => {\n        setPersons(persons.filter(person => person.id !== id))\n        notify(`${toDelete.name}'s number was sucessfully deleted!`, 'ok')\n      }).catch(() => {\n        setPersons(persons.filter(person => person.id !== id))\n        notify(`${toDelete.name} had already been removed`)\n      })\n  }\n}\n\nconst addPerson = (event) => {\n  event.preventDefault()\n  const personObject = {\n    name: newName,\n    number: newNumber\n  }\n  const duplicateName = persons.some(person => person.name.toLowerCase() === newName.toLowerCase())\n  const duplicateNumber = persons.some(person => person.number.replace(/ /g, '') === newNumber.replace(/ /g, ''))\n    \n  if (!duplicateName) {\n    personService\n      .create(personObject)\n      .then(returnedPerson => {\n        setPersons(persons.concat(returnedPerson))\n        notify(`${personObject.name} was sucessfully added!`, 'ok')\n      })\n      .catch(error => {\n        console.log('e.r.d:', error.response.data.error)\n        notify(error.response.data.error)\n      })  \n  }\n  else if (duplicateName && duplicateNumber) { \n    window.alert(`${newName} is already added to phonebook`)\n  }\n  else if (duplicateName && !duplicateNumber) {\n    const person = persons.find(person => person.name.toLowerCase() === newName.toLowerCase())\n    const changedPerson = {...person, number: newNumber}\n    const isConfirm = (window.confirm(`${newName} is already added to phonebook, replace the old number with a new one? `))\n      if (isConfirm) { \n        console.log(\"outside\", changedPerson, changedPerson.id)\n        personService\n          .update(changedPerson.id, changedPerson)\n          .then(response => {\n            console.log(\"inside\", changedPerson, changedPerson.id, response)\n            setPersons(persons.map(person => person.id !== changedPerson.id ? person :response))\n            notify(`${person.name}'s number was sucessfully changed!`, 'ok')\n          }) \n          .catch((error) => {\n            const errMessage = error.response.data.error\n            if (errMessage.includes(\"deleted\")) {\n              setPersons(persons.filter(person => person.id !== changedPerson.id))\n              return notify(errMessage);\n            }\n            console.log(\"I shouldnt run if errmessage equals Validation failed\")\n            notify(errMessage)\n          })\n      }\n    } \n    setNewName('')\n    setNewNumber('')  \n} \n\nconst personsToShow = searchTerm.length === 0 ?\n    persons : \n    persons.filter(person => person.name.toLowerCase().includes(searchTerm.toLowerCase()))\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n        <Notification notice={notification}/>\n        <Filter value={searchTerm} onChange={handleFilterChange} />\n      <h2>add a new</h2>\n        <PersonForm addPerson={addPerson}\n                    newName={newName}\n                    newNumber={newNumber}\n                    handleNameChange={handleNameChange}\n                    handleNumberChange={handleNumberChange}\n          />\n      <h2>Numbers</h2>\n        <Persons persons={personsToShow} removePerson={removePersonOf} />\n    </div>\n  )\n}\n\nexport default App\n\n\n//////////////////////////////////////////////////\n//////   Suggested Solution\n//////////////////////////////////////////////////\n/* \nimport React, { useState, useEffect } from 'react'\nimport Persons from './components/Persons'\nimport PersonForm from './components/PersonForm'\nimport Notification from './components/Notification'\nimport Filter from './components/Filter'\nimport personService from './services/persons'\n\nconst App = () => {\n  const [persons, setPersons] = useState([])\n  const [ newName, setNewName ] = useState('')\n  const [ newNumber, setNewNumber ] = useState('')\n  const [ filterString, setStringFilter ] = useState('')\n  const [ notification, setNotification ] = useState(null)\n\n  useEffect(() => {\n    personService\n      .getAll()\n      .then((data) => {\n        setPersons(data)\n      })\n\n  }, [])\n\n  const notifyWith = (message, type='success') => {\n    setNotification({ message, type })\n    setTimeout(() => {\n      setNotification(null)\n    }, 5000)\n  }\n\n  const handleNameChange = (event) => {\n    setNewName(event.target.value)\n  }  \n  \n  const handleNumberChange = (event) => {\n    setNewNumber(event.target.value)\n  }  \n\n  const handleFilterStringChange = (event) => {\n    setStringFilter(event.target.value)\n  } \n\n  const deletePerson = (id) => {\n    const toDelete = persons.find(p => p.id === id)\n    const ok = window.confirm(`Delete ${toDelete.name}`)\n    if (ok) {\n      personService.remove(id)\n        .then(response => {\n          setPersons(persons.filter(p => p.id !== id))\n          notifyWith(`Deleted ${toDelete.name}`)\n        }).catch(() => {\n          setPersons(persons.filter(p => p.id !== id))\n          notifyWith(`${toDelete.name} had already been removed`, 'error')\n        })\n    }\n  }\n\n  const addPerson = (event) => {\n    event.preventDefault()\n\n    const existing = persons.find(p => p.name === newName)\n    if (existing) {\n      const ok = window.confirm(`${existing.name} already in phonebook, replace the old number with new one?`)\n      if (ok) {\n        personService.update(existing.id, {\n          name: existing.name,\n          number:newNumber\n        }).then(retunedPerson => {\n          setPersons(persons.map(person => person.id !== existing.id ? person : retunedPerson))\n          notifyWith(`Changed number of  ${existing.name}`)\n          setNewName('')\n          setNewNumber('')\n        })\n      }\n\n    } else {\n      personService.create({\n        name: newName,\n        number: newNumber   \n      }).then(addedPerson => {\n        setPersons(persons.concat(addedPerson))\n        notifyWith(`Added ${newName}`)\n        setNewName('')\n        setNewNumber('')\n      }).catch(error => {\n        // pääset käsiksi palvelimen palauttamaan virheilmoitusolioon näin\n        console.log(error.response.data.error)\n        notifyWith(`${error.response.data.error} `, 'error')\n      })\n    }\n  }\n\n  const personsToShow = filterString.length === 0 ?\n    persons : \n    persons.filter(p => p.name.toLowerCase().indexOf(filterString.toLowerCase()) > 0 )\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n\n      <Notification notification={notification} />\n\n      filter shown with: \n      <Filter\n        value={filterString}\n        onChange={handleFilterStringChange}\n      />\n\n      <h3>add a new</h3>\n      <PersonForm \n        handleNameChange={handleNameChange}\n        handleNumberChange={handleNumberChange}\n        newNumber={newNumber}\n        newName={newName}\n        addPerson={addPerson}\n      />\n     \n      <h3>Numbers</h3>\n      <Persons persons={personsToShow} deletePerson={deletePerson}/>\n    </div>\n  )\n\n}\n\nexport default App \n */\n\n//////////////////////////////////////////////////\n//////   2.20: The Phonebook Step11\n//////////////////////////////////////////////////\n/* \nimport React, { useState, useEffect } from 'react'\nimport Filter from './components/Filter'\nimport Persons from './components/Persons'\nimport PersonForm from './components/PersonForm'\nimport Notification from './components/Notification'\nimport personService from './services/persons'\n\n\nconst App = () => {\n  const [ persons, setPersons ] = useState([]) \n  const [ newName, setNewName ] = useState('')\n  const [ newNumber, setNewNumber ] = useState('')\n  const [ searchTerm, setSearchTerm ] = useState('')\n  const [notification, setNotification] = useState(null)\n\n  useEffect(() => {\n      personService\n        .getAll()\n        .then(initialPersons => {\n          setPersons(initialPersons)\n        })\n  }, [])\n  \n  const handleNameChange = (event) => {\n    console.log(event.target.value)\n    setNewName(event.target.value)\n  }\n\n  const handleNumberChange = (event) => {\n    console.log(event.target.value)\n    setNewNumber(event.target.value)\n  }\n\n  const handleFilterChange = (event) => {\n    console.log(event.target.value)\n    setSearchTerm(event.target.value)\n  }\n\n  const notify = (message, type='error') => {\n    setNotification({type,message})\n    setTimeout(() => {\n      setNotification(null)\n    }, 2500)\n  }\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n        <Notification notice={notification}/>\n        <Filter searchTerm={searchTerm}\n                handleFilterChange={handleFilterChange} \n        />\n      <h2>add a new</h2>\n        <PersonForm persons={persons}\n                    setPersons={setPersons}\n                    newName={newName}\n                    setNewName={setNewName}\n                    handleNameChange={handleNameChange} \n                    newNumber={newNumber}\n                    setNewNumber={setNewNumber}\n                    handleNumberChange={handleNumberChange}\n                    setNotification={setNotification}\n                    notify={notify}\n          />\n      <h2>Numbers</h2>\n        <Persons persons={persons}\n                 setPersons={setPersons}\n                 searchTerm={searchTerm}\n                 setNotification={setNotification}\n                 notify={notify} \n        />\n    </div>\n  )\n}\n\nexport default App\n*/","//////////////////////////////////////////////////\n//////   My solution with corrections\n//////////////////////////////////////////////////\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />, document.getElementById('root'));\n\n//////////////////////////////////////////////////\n//////   suggested solution\n//////////////////////////////////////////////////\n/* \nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport './index.css'\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n)\n */\n//////////////////////////////////////////////////\n//////   2.11: The Phonebook Step6\n//////////////////////////////////////////////////\n/* \nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />, document.getElementById('root'));\n */\n//////////////////////////////////////////////////\n//////   2.8-10: The Phonebook Step3-5\n//////////////////////////////////////////////////\n/* \nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nconst persons = [\n  {\n    id: 1,\n    name: 'Arto Hellas',\n    number: '040-1234567',\n  },\n  {\n    id: 2,\n    name: 'Ada Lovelace',\n    number: '39-44-5323523',\n  }\n]\n\n\nReactDOM.render(\n  <App persons={persons} />,\n  document.getElementById('root')\n);\n*/\n\n//////////////////////////////////////////////////\n//////   2.7: The Phonebook Step2\n//////////////////////////////////////////////////\n\n/* import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nconst persons = [\n  {\n    id: 1,\n    name: 'Arto Hellas'\n  },\n  {\n    id: 2,\n    name: 'Ada Lovelace'\n  },\n]\n\n//console.log(persons.includes('Ada Lovelace'))\n\nReactDOM.render(\n  <App persons={persons} />,\n  document.getElementById('root')\n);\n */\n\n//////////////////////////////////////////////////\n//////   2.6: The Phonebook Step1\n//////////////////////////////////////////////////\n\n/* \nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nconst persons = [\n  {\n    id: 1,\n    name: 'Arto Hellas'\n  },\n  {\n    id: 2,\n    name: 'Ada Lovelace'\n  }\n]\n\nReactDOM.render(\n  <App persons={persons} />,\n  document.getElementById('root')\n); \n*/"],"sourceRoot":""}